{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","id","advice","newAdvice","bind","randomBackgroundClr","document","body","style","background","Math","round","random","fetch","then","response","json","data","setState","slip","this","msgLen","length","width","animation","className","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2OAkDeA,E,kDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,GAAI,GACJC,OAAQ,IAEV,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAPV,E,uDAUnB,WACEE,SAASC,KAAKC,MAAMC,WAAa,OAASC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,c,uBAG9E,WAAa,IAAD,OACVC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZjB,GAAIgB,EAAKE,KAAKlB,GACdC,OAAQe,EAAKE,KAAKjB,SAEpB,EAAKG,2B,+BAIT,WACEe,KAAKjB,c,oBAGP,WACE,IAAIkB,EAASD,KAAKpB,MAAME,OAAOoB,OAAS,GAClCd,EAAQ,CACZe,MAAM,GAAD,OAAKF,EAAL,MACLG,UAAU,UAAD,OAAqB,IAARH,EAAb,mBAAoCA,EAApC,6CAGX,OACE,sBAAKI,UAAU,UAAf,UACE,sBAAKjB,MAAOA,EAAOiB,UAAU,gBAA7B,qBAA0EL,KAAKpB,MAAMC,GAArF,KAA2FmB,KAAKpB,MAAME,SAApDkB,KAAKpB,MAAMC,IAC7D,wBAAQwB,UAAU,gBAAgBC,QAASN,KAAKjB,UAAhD,gC,GAzCUwB,IAAMC,WCUTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BX,M","file":"static/js/main.636e2e59.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      id: '',\n      advice: ''\n    };\n    this.newAdvice = this.newAdvice.bind(this);\n    this.randomBackgroundClr = this.randomBackgroundClr.bind(this);\n  }\n\n  randomBackgroundClr() {\n    document.body.style.background = \"hsl(\" + Math.round(Math.random() * 360) + \",50%,70%)\";\n  }\n\n  newAdvice() {\n    fetch('https://api.adviceslip.com/advice')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        id: data.slip.id,\n        advice: data.slip.advice\n      })\n      this.randomBackgroundClr()\n    })\n  }\n\n  componentDidMount() {\n    this.newAdvice()\n  }\n\n  render () {\n    let msgLen = this.state.advice.length + 13\n    const style = {\n      width: `${msgLen}ch`,\n      animation: `typing ${(msgLen)*0.09}s steps(${msgLen}), blink .5s step-end infinite alternate`,\n    }\n\n    return (\n      <div className=\"wrapper\">\n        <div style={style} className=\"typing-effect\" key={this.state.id}>Advice #{this.state.id}: {this.state.advice}</div>\n        <button className=\"advice-button\" onClick={this.newAdvice}>More Advice</button>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}